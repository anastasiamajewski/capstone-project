{"version":3,"sources":["GlobalStyles.js","components/Header.js","components/Checkbox.js","pages/Statements.js","App.js","serviceWorker.js","index.js"],"names":["createGlobalStyle","Header","HeaderStyled","styled","header","Checkbox","checked","props","CheckboxHidden","CheckboxStyled","input","attrs","type","div","Statements","useState","statements","list","setList","TextStyled","BoldText","RectangleStyled","map","item","key","id","ListStyled","select","onChange","StatementStyled","text","p","span","label","App","GlobalStyles","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"01FAEeA,kBAAf,KCCe,SAASC,IACtB,OACE,oCACE,kBAACC,EAAD,qBAKN,IAAMA,EAAeC,IAAOC,OAAV,2EAAGD,CAAH,+K,wBCPH,SAASE,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,QAAYC,EAAS,2BACtD,OACE,+BACE,kBAACC,EAAD,eAAgBF,QAASA,GAAaC,IACtC,kBAACE,EAAD,CAAgBH,QAASA,KAS/B,IAAME,EAAiBL,IAAOO,MAAMC,MAAM,CAAEC,KAAM,aAA9B,2EAAGT,CAAH,sJAYdM,EAAiBN,IAAOU,IAAV,2EAAGV,CAAH,8EAIJ,SAACI,GAAD,OACZA,EAAMD,QAAU,mBAAqB,4B,QC5B1B,SAASQ,IAAc,IAAD,EACXC,mBAASC,GADE,mBAC5BC,EAD4B,KACtBC,EADsB,KAEnC,OACE,oCACE,8BACE,kBAACC,EAAD,qNAKA,kBAACA,EAAD,2JAGK,kBAACC,EAAD,aAHL,uGAMA,kBAACC,EAAD,MACCJ,EAAKK,KAAI,SAACC,GAAD,OACR,6BAASC,IAAKD,EAAKE,IACjB,kBAACC,EAAD,KACE,kBAACrB,EAAD,CACEO,KAAK,WACLN,QAASiB,EAAKI,OACdC,SAAU,kBASMH,EATqBF,EAAKE,QAUtDP,EACED,EAAKK,KAAI,SAACC,GACR,OAAIA,EAAKE,KAAOA,EACP,eAAKF,EAAZ,CAAkBI,QAASJ,EAAKI,SAEzBJ,MANf,IAA8BE,KAPlB,kBAACI,EAAD,KAAkBN,EAAKO,aA0BrC,IAAMX,EAAahB,IAAO4B,EAAV,6EAAG5B,CAAH,yBAGViB,EAAWjB,IAAO6B,KAAV,2EAAG7B,CAAH,sBAGRkB,EAAkBlB,IAAOU,IAAV,kFAAGV,CAAH,uHAQfuB,EAAavB,IAAO8B,MAAV,6EAAG9B,CAAH,yFAMV0B,EAAkB1B,IAAO6B,KAAV,kFAAG7B,CAAH,sBC9DN+B,MAVf,WACE,OACE,oCACE,kBAACC,EAAD,MACA,kBAAClC,EAAD,MACA,kBAACa,EAAD,QCEcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1394e46f.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components/macro'\n\nexport default createGlobalStyle`\n:root{\n    --primary-dark: #011B1F;\n    --secondary: #344C54;\n    --secondary-40: #AEB7BB;\n    --primary-light: #C9B59E;\n    --primary-light-40: #E6DDD3;\n    --primary-light-8: #FBF9F8;\n}\n\n* {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    font-family: 'Montserrat', sans-serif;\n}\n\nbody {\n    color: var(--primary-dark);\n    background: var(--primary-light-8);\n    font-size: 18px;\n    font-weight: 300;\n}\n\nmain {\n    overflow: scroll;\n    line-height: 1.5;\n    padding-top: 76px;\n    margin-left: 24px;\n    margin-right: 24px;\n    height: 100vh;\n}\n`\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nexport default function Header() {\n  return (\n    <>\n      <HeaderStyled>Seelenleben</HeaderStyled>\n    </>\n  )\n}\n\nconst HeaderStyled = styled.header`\n  position: fixed;\n  z-index: 1;\n  width: 100vw;\n  height: 48px;\n  font-family: 'Amatic SC', cursive;\n  font-weight: bold;\n  font-size: 36px;\n  text-align: center;\n  background-color: var(--primary-light);\n`\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport styled from 'styled-components/macro'\n\nexport default function Checkbox({ checked, ...props }) {\n  return (\n    <label>\n      <CheckboxHidden checked={checked} {...props} />\n      <CheckboxStyled checked={checked} />\n    </label>\n  )\n}\n\nCheckbox.propTypes = {\n  checked: PropTypes.bool,\n}\n\nconst CheckboxHidden = styled.input.attrs({ type: 'checkbox' })`\n  border: 0;\n  clip: rect(0 0 0 0);\n  clippath: inset(50%);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n`\nconst CheckboxStyled = styled.div`\n  width: 24px;\n  height: 24px;\n  border: solid 4px var(--secondary);\n  background: ${(props) =>\n    props.checked ? 'var(--secondary)' : 'var(--primary-light-8)'};\n`\n","import PropTypes from 'prop-types'\nimport React, { useState } from 'react'\nimport styled from 'styled-components/macro'\nimport Checkbox from '../components/Checkbox'\nimport statements from '../statements.json'\n\nexport default function Statements() {\n  const [list, setList] = useState(statements)\n  return (\n    <>\n      <main>\n        <TextStyled>\n          Mir hat es geholfen, mich selbst besser einschätzen zu können, also\n          fangen wir dabei an - Mithilfe von Aussagen, die du in Susan Cains\n          Buch „Still - Die Kraft der Introvertierten“ findest.\n        </TextStyled>\n        <TextStyled>\n          Klicke einfach auf die untenstehenden Statements, bei denen du denkst,\n          dass sie auf dich zutreffen. Du bist dir unsicher? Wähle es aus, wenn\n          es <BoldText>eher</BoldText> auf dich zutrifft. Je mehr Aussagen du\n          auswählst, desto introvertierter bist du wahrscheinlich.\n        </TextStyled>\n        <RectangleStyled />\n        {list.map((item) => (\n          <section key={item.id}>\n            <ListStyled>\n              <Checkbox\n                type=\"checkbox\"\n                checked={item.select}\n                onChange={() => handleChangeCheckbox(item.id)}\n              />\n              <StatementStyled>{item.text}</StatementStyled>\n            </ListStyled>\n          </section>\n        ))}\n      </main>\n    </>\n  )\n  function handleChangeCheckbox(id) {\n    setList(\n      list.map((item) => {\n        if (item.id === id) {\n          return { ...item, select: !item.select }\n        } else {\n          return item\n        }\n      })\n    )\n  }\n}\n\nStatements.propTypes = {\n  text: PropTypes.string,\n  id: PropTypes.number,\n  select: PropTypes.bool,\n}\n\nconst TextStyled = styled.p`\n  margin-bottom: 24px;\n`\nconst BoldText = styled.span`\n  font-weight: 700;\n`\nconst RectangleStyled = styled.div`\n  width: 75%;\n  height: 1px;\n  background-color: var(--primary-light);\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 24px;\n`\nconst ListStyled = styled.label`\n  margin-bottom: 16px;\n  display: grid;\n  grid-template-columns: 30px auto;\n  align-items: center;\n`\nconst StatementStyled = styled.span`\n  margin-left: 8px;\n`\n","import React from 'react'\nimport GlobalStyles from './GlobalStyles'\nimport HeaderStyled from './components/Header'\nimport Statements from './pages/Statements'\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyles />\n      <HeaderStyled />\n      <Statements />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}